############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
handlers=java.util.logging.ConsoleHandler,java.util.logging.FileHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# 
# .level=OFF|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST|ALL
.level=INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.level=ALL
java.util.logging.FileHandler.pattern=var/log/StockExchange.log
java.util.logging.FileHandler.limit=2097000
#java.util.logging.FileHandler.limit=2097152
java.util.logging.FileHandler.count=500
#java.util.logging.FileHandler.formatter=java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter=com.javath.util.LoggingFormatter

# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level=ALL
#java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.formatter=com.javath.util.LoggingFormatter

# Note support jdk 1.7
# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# 1. date - a Date object representing event time of the log record.
# 2. source - a string representing the caller, if available; otherwise, the logger's name.
# 3. logger - the logger's name.
# 4. level - the log level.
# 5. message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. It uses java.text formatting and does not use the java.util.Formatter format argument.
# 6. thrown - a string representing the throwable associated with the log record and its backtrace beginning with a newline character, if any; otherwise, an empty string.
#
############################################################ 
# Some example formats:
############################################################ 
# +   java.util.logging.SimpleFormatter.format="%4$s: %5$s [%1$tc]%n"
# 
#     This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket.
# 
#          WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]          
# 
# +   java.util.logging.SimpleFormatter.format="%1$tc %2$s%n%4$s: %5$s%6$s%n"
# 
#     This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); the second line includes the log level (4$) and the log message (5$) followed with the throwable and its backtrace (6$), if any:
# 
#          Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
#          SEVERE: several message with an exception
#          java.lang.IllegalArgumentException: invalid argument
#                  at MyClass.mash(MyClass.java:9)
#                  at MyClass.crunch(MyClass.java:6)
#                  at MyClass.main(MyClass.java:3)          
# 
# +   java.util.logging.SimpleFormatter.format="%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n"
# 
#     This prints 2 lines similar to the example above with a different date/time formatting and does not print the throwable and its backtrace:
# 
#          Mar 22, 2011 1:11:31 PM MyClass fatal
#          SEVERE: several message with an exception
#
############################################################          
java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$tdT%1$tH\:%1$tM\:%1$tS [%4$s] %2$s\: %5$s%6$s%n
#java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %2$s%n%4$s: %5$s%6$s%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
# com.xyz.foo.level = SEVERE
#  OFF|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST|ALL
############################################################
org.hibernate.level=SEVERE
com.javath.level=FINE
com.javath.mapping.level=INFO
com.javath.stock.BrokerClick2Win.level=FINEST
com.javath.stock.settrade.DataProviderBinary.level=FINER

